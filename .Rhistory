geom_smooth(method="lm", fill=NA, lwd=1.25, se = FALSE) +
geom_path(data=dens, aes(x, y, group = grouping),
color="salmon", lwd=1.1, alpha = 0.25) +
theme_bw() +
geom_vline(xintercept=breaks, lty=2)
## Sample data
set.seed(0)
dat <- data.frame(x=(x=runif(100, 0, 50)),
y=rnorm(100, 10 * x, 100))
## breaks: where you want to compute densities
breaks <- seq(0, max(dat$x), len=5)
dat$section <- cut(dat$x, breaks)
## Get the residuals
dat$res <- residuals(lm(y ~ x, data=dat))
## Compute densities for each section, and flip the axes, and add means of sections
## Note: the densities need to be scaled in relation to the section size (2000 here)
ys <- seq(-300, 300, length = 50)
xs <- rep(breaks, each = 50) + 1000 * dnorm(ys, 0, 100)
res <- matrix(0, 50, 5)
for (i in 1:5) {
res[, i] <- 10 * breaks[i] + ys
}
dens <- data.frame(x = xs, y=c(res),
grouping = rep(1:5, each = 300))
# dens <- do.call(rbind, lapply(split(dat, dat$section), function(x) {
#     d <- density(x$res, n=50)
#     res <- data.frame(x=max(x$x)- d$y*2000, y=d$x+mean(x$y))
#     res <- res[order(res$y), ]
#     ## Get some data for normal lines as well
#     xs <- seq(min(x$res), max(x$res), len=50)
#     res <- rbind(res, data.frame(y=xs + mean(x$y),
#                                  x=max(x$x) - 2000*dnorm(xs, 0, sd(x$res))))
#     res$type <- rep(c("empirical", "normal"), each=50)
#     res
# }))
# dens$section <- rep(levels(dat$section), each=100)
# ## Plot both empirical and theoretical
# ggplot(dat, aes(x, y)) +
#   geom_point() +
#   geom_smooth(method="lm", fill=NA, lwd=2) +
#   geom_path(data=dens, aes(x, y, group=interaction(section,type), color=type), lwd=1.1) +
#   theme_bw() +
#   geom_vline(xintercept=breaks, lty=2)
ggplot(dat, aes(x, y)) +
geom_point() +
geom_smooth(method="lm", fill=NA, lwd=1.25, se = FALSE) +
geom_path(data=dens, aes(x, y, group = grouping),
color="salmon", lwd=1.1, alpha = 0.25) +
theme_bw() +
geom_vline(xintercept=breaks, lty=2)
# ## Plot both empirical and theoretical
# ggplot(dat, aes(x, y)) +
#   geom_point() +
#   geom_smooth(method="lm", fill=NA, lwd=2) +
#   geom_path(data=dens, aes(x, y, group=interaction(section,type), color=type), lwd=1.1) +
#   theme_bw() +
#   geom_vline(xintercept=breaks, lty=2)
ggplot(dat, aes(x, y)) +
geom_point() +
geom_smooth(method="lm", fill=NA, lwd=1.25, se = FALSE) +
geom_path(data=dens, aes(x, y, group = factor(grouping))),
color="salmon", lwd=1.1, alpha = 0.25) +
theme_bw() +
geom_vline(xintercept=breaks, lty=2)
# ## Plot both empirical and theoretical
# ggplot(dat, aes(x, y)) +
#   geom_point() +
#   geom_smooth(method="lm", fill=NA, lwd=2) +
#   geom_path(data=dens, aes(x, y, group=interaction(section,type), color=type), lwd=1.1) +
#   theme_bw() +
#   geom_vline(xintercept=breaks, lty=2)
ggplot(dat, aes(x, y)) +
geom_point() +
geom_smooth(method="lm", fill=NA, lwd=1.25, se = FALSE) +
geom_path(data=dens, aes(x, y, group = grouping),
color="salmon", lwd=1.1, alpha = 0.25) +
theme_bw() +
geom_vline(xintercept=breaks, lty=2)
str(dens)
# ## Plot both empirical and theoretical
# ggplot(dat, aes(x, y)) +
#   geom_point() +
#   geom_smooth(method="lm", fill=NA, lwd=2) +
#   geom_path(data=dens, aes(x, y, group=interaction(section,type), color=type), lwd=1.1) +
#   theme_bw() +
#   geom_vline(xintercept=breaks, lty=2)
ggplot(dat, aes(x, y)) +
geom_point() +
geom_smooth(method="lm", fill=NA, lwd=1.25, se = FALSE) +
geom_path(data=dens, aes(x, y, group = intercation(grouping)),
color="salmon", lwd=1.1, alpha = 0.25) +
theme_bw() +
geom_vline(xintercept=breaks, lty=2)
dat$section
dens <- data.frame(x = xs, y=c(res),
grouping = cut(xs, breaks))
## Sample data
set.seed(0)
dat <- data.frame(x=(x=runif(100, 0, 50)),
y=rnorm(100, 10 * x, 100))
## breaks: where you want to compute densities
breaks <- seq(0, max(dat$x), len=5)
dat$section <- cut(dat$x, breaks)
## Get the residuals
dat$res <- residuals(lm(y ~ x, data=dat))
## Compute densities for each section, and flip the axes, and add means of sections
## Note: the densities need to be scaled in relation to the section size (2000 here)
ys <- seq(-300, 300, length = 50)
xs <- rep(breaks, each = 50) + 1000 * dnorm(ys, 0, 100)
res <- matrix(0, 50, 5)
for (i in 1:5) {
res[, i] <- 10 * breaks[i] + ys
}
dens <- data.frame(x = xs, y=c(res),
grouping = cut(xs, breaks))
# dens <- do.call(rbind, lapply(split(dat, dat$section), function(x) {
#     d <- density(x$res, n=50)
#     res <- data.frame(x=max(x$x)- d$y*2000, y=d$x+mean(x$y))
#     res <- res[order(res$y), ]
#     ## Get some data for normal lines as well
#     xs <- seq(min(x$res), max(x$res), len=50)
#     res <- rbind(res, data.frame(y=xs + mean(x$y),
#                                  x=max(x$x) - 2000*dnorm(xs, 0, sd(x$res))))
#     res$type <- rep(c("empirical", "normal"), each=50)
#     res
# }))
# dens$section <- rep(levels(dat$section), each=100)
# ## Plot both empirical and theoretical
# ggplot(dat, aes(x, y)) +
#   geom_point() +
#   geom_smooth(method="lm", fill=NA, lwd=2) +
#   geom_path(data=dens, aes(x, y, group=interaction(section,type), color=type), lwd=1.1) +
#   theme_bw() +
#   geom_vline(xintercept=breaks, lty=2)
ggplot(dat, aes(x, y)) +
geom_point() +
geom_smooth(method="lm", fill=NA, lwd=1.25, se = FALSE) +
geom_path(data=dens, aes(x, y, group = intercation(grouping)),
color="salmon", lwd=1.1, alpha = 0.25) +
theme_bw() +
geom_vline(xintercept=breaks, lty=2)
## Sample data
set.seed(0)
dat <- data.frame(x=(x=runif(100, 0, 50)),
y=rnorm(100, 10 * x, 100))
## breaks: where you want to compute densities
breaks <- seq(0, max(dat$x), len=5)
dat$section <- cut(dat$x, breaks)
## Get the residuals
dat$res <- residuals(lm(y ~ x, data=dat))
## Compute densities for each section, and flip the axes, and add means of sections
## Note: the densities need to be scaled in relation to the section size (2000 here)
ys <- seq(-300, 300, length = 50)
xs <- rep(breaks, each = 50) + 1000 * dnorm(ys, 0, 100)
res <- matrix(0, 50, 5)
for (i in 1:5) {
res[, i] <- 10 * breaks[i] + ys
}
dens <- data.frame(x = xs, y=c(res),
grouping = cut(xs, breaks))
# dens <- do.call(rbind, lapply(split(dat, dat$section), function(x) {
#     d <- density(x$res, n=50)
#     res <- data.frame(x=max(x$x)- d$y*2000, y=d$x+mean(x$y))
#     res <- res[order(res$y), ]
#     ## Get some data for normal lines as well
#     xs <- seq(min(x$res), max(x$res), len=50)
#     res <- rbind(res, data.frame(y=xs + mean(x$y),
#                                  x=max(x$x) - 2000*dnorm(xs, 0, sd(x$res))))
#     res$type <- rep(c("empirical", "normal"), each=50)
#     res
# }))
# dens$section <- rep(levels(dat$section), each=100)
# ## Plot both empirical and theoretical
# ggplot(dat, aes(x, y)) +
#   geom_point() +
#   geom_smooth(method="lm", fill=NA, lwd=2) +
#   geom_path(data=dens, aes(x, y, group=interaction(section,type), color=type), lwd=1.1) +
#   theme_bw() +
#   geom_vline(xintercept=breaks, lty=2)
ggplot(dat, aes(x, y)) +
geom_point() +
geom_smooth(method="lm", fill=NA, lwd=1.25, se = FALSE) +
geom_path(data=dens, aes(x, y, group = interaction(grouping)),
color="salmon", lwd=1.1, alpha = 0.25) +
theme_bw() +
geom_vline(xintercept=breaks, lty=2)
## Sample data
set.seed(0)
dat <- data.frame(x=(x=runif(100, 0, 50)),
y=rnorm(100, 10 * x, 100))
## breaks: where you want to compute densities
breaks <- seq(0, max(dat$x), len=5)
dat$section <- cut(dat$x, breaks)
## Get the residuals
dat$res <- residuals(lm(y ~ x, data=dat))
## Compute densities for each section, and flip the axes, and add means of sections
## Note: the densities need to be scaled in relation to the section size (2000 here)
ys <- seq(-300, 300, length = 50)
xs <- rep(breaks, each = 50) + 1000 * dnorm(ys, 0, 100)
res <- matrix(0, 50, 5)
for (i in 1:5) {
res[, i] <- 10 * breaks[i] + ys
}
dens <- data.frame(x = xs, y=c(res),
grouping = cut(xs, breaks))
# dens <- do.call(rbind, lapply(split(dat, dat$section), function(x) {
#     d <- density(x$res, n=50)
#     res <- data.frame(x=max(x$x)- d$y*2000, y=d$x+mean(x$y))
#     res <- res[order(res$y), ]
#     ## Get some data for normal lines as well
#     xs <- seq(min(x$res), max(x$res), len=50)
#     res <- rbind(res, data.frame(y=xs + mean(x$y),
#                                  x=max(x$x) - 2000*dnorm(xs, 0, sd(x$res))))
#     res$type <- rep(c("empirical", "normal"), each=50)
#     res
# }))
# dens$section <- rep(levels(dat$section), each=100)
# ## Plot both empirical and theoretical
# ggplot(dat, aes(x, y)) +
#   geom_point() +
#   geom_smooth(method="lm", fill=NA, lwd=2) +
#   geom_path(data=dens, aes(x, y, group=interaction(section,type), color=type), lwd=1.1) +
#   theme_bw() +
#   geom_vline(xintercept=breaks, lty=2)
ggplot(dat, aes(x, y)) +
geom_point() +
geom_smooth(method="lm", fill=NA, lwd=1.25, se = FALSE) +
geom_path(data=dens, aes(x, y, group = (grouping)),
color="salmon", lwd=1.1, alpha = 0.25) +
theme_bw() +
geom_vline(xintercept=breaks, lty=2)
## Sample data
set.seed(0)
dat <- data.frame(x=(x=runif(100, 0, 50)),
y=rnorm(100, 10 * x, 100))
## breaks: where you want to compute densities
breaks <- seq(0, max(dat$x), len=5)
dat$section <- cut(dat$x, breaks)
## Get the residuals
dat$res <- residuals(lm(y ~ x, data=dat))
## Compute densities for each section, and flip the axes, and add means of sections
## Note: the densities need to be scaled in relation to the section size (2000 here)
ys <- seq(-300, 300, length = 50)
xs <- rep(breaks, each = 50) + 1000 * dnorm(ys, 0, 100)
res <- matrix(0, 50, 5)
for (i in 1:5) {
res[, i] <- 10 * breaks[i] + ys
}
dens <- data.frame(x = xs, y=c(res),
grouping = cut(xs, breaks))
# dens <- do.call(rbind, lapply(split(dat, dat$section), function(x) {
#     d <- density(x$res, n=50)
#     res <- data.frame(x=max(x$x)- d$y*2000, y=d$x+mean(x$y))
#     res <- res[order(res$y), ]
#     ## Get some data for normal lines as well
#     xs <- seq(min(x$res), max(x$res), len=50)
#     res <- rbind(res, data.frame(y=xs + mean(x$y),
#                                  x=max(x$x) - 2000*dnorm(xs, 0, sd(x$res))))
#     res$type <- rep(c("empirical", "normal"), each=50)
#     res
# }))
# dens$section <- rep(levels(dat$section), each=100)
# ## Plot both empirical and theoretical
# ggplot(dat, aes(x, y)) +
#   geom_point() +
#   geom_smooth(method="lm", fill=NA, lwd=2) +
#   geom_path(data=dens, aes(x, y, group=interaction(section,type), color=type), lwd=1.1) +
#   theme_bw() +
#   geom_vline(xintercept=breaks, lty=2)
ggplot(dat, aes(x, y)) +
geom_point() +
geom_smooth(method="lm", fill=NA, lwd=1.25, se = FALSE) +
geom_path(data=dens, aes(x, y, group = grouping),
color="salmon", lwd=1.1, alpha = 0.25) +
theme_bw() +
geom_vline(xintercept=breaks, lty=2)
## Sample data
set.seed(0)
dat <- data.frame(x=(x=runif(100, 0, 50)),
y=rnorm(100, 10 * x, 100))
## breaks: where you want to compute densities
breaks <- seq(0, max(dat$x), len=5)
dat$section <- cut(dat$x, breaks)
## Get the residuals
dat$res <- residuals(lm(y ~ x, data=dat))
## Compute densities for each section, and flip the axes, and add means of sections
## Note: the densities need to be scaled in relation to the section size (2000 here)
ys <- seq(-300, 300, length = 50)
xs <- rep(breaks, each = 50) + 1000 * dnorm(ys, 0, 100)
res <- matrix(0, 50, 5)
for (i in 1:5) {
res[, i] <- 10 * breaks[i] + ys
}
dens <- data.frame(x = xs, y=c(res),
grouping = cut(xs, breaks))
# dens <- do.call(rbind, lapply(split(dat, dat$section), function(x) {
#     d <- density(x$res, n=50)
#     res <- data.frame(x=max(x$x)- d$y*2000, y=d$x+mean(x$y))
#     res <- res[order(res$y), ]
#     ## Get some data for normal lines as well
#     xs <- seq(min(x$res), max(x$res), len=50)
#     res <- rbind(res, data.frame(y=xs + mean(x$y),
#                                  x=max(x$x) - 2000*dnorm(xs, 0, sd(x$res))))
#     res$type <- rep(c("empirical", "normal"), each=50)
#     res
# }))
# dens$section <- rep(levels(dat$section), each=100)
# ## Plot both empirical and theoretical
# ggplot(dat, aes(x, y)) +
#   geom_point() +
#   geom_smooth(method="lm", fill=NA, lwd=2) +
#   geom_path(data=dens, aes(x, y, group=interaction(section,type), color=type), lwd=1.1) +
#   theme_bw() +
#   geom_vline(xintercept=breaks, lty=2)
ggplot(dat, aes(x, y)) +
geom_point() +
geom_smooth(method="lm", fill=NA, lwd=1.25, se = FALSE) +
geom_path(data=dens, aes(x, y, group = grouping),
color="salmon", lwd=1.1) +
theme_bw() +
geom_vline(xintercept=breaks, lty=2)
## Sample data
set.seed(0)
dat <- data.frame(x=(x=runif(100, 0, 50)),
y=rnorm(100, 10 * x, 100))
## breaks: where you want to compute densities
breaks <- seq(0, max(dat$x), len=7)[-c(1, 7)]
dat$section <- cut(dat$x, breaks)
## Get the residuals
dat$res <- residuals(lm(y ~ x, data=dat))
## Compute densities for each section, and flip the axes, and add means of sections
## Note: the densities need to be scaled in relation to the section size (2000 here)
ys <- seq(-300, 300, length = 50)
xs <- rep(breaks, each = 50) + 1000 * dnorm(ys, 0, 100)
res <- matrix(0, 50, 5)
for (i in 1:5) {
res[, i] <- 10 * breaks[i] + ys
}
dens <- data.frame(x = xs, y=c(res),
grouping = cut(xs, breaks))
# dens <- do.call(rbind, lapply(split(dat, dat$section), function(x) {
#     d <- density(x$res, n=50)
#     res <- data.frame(x=max(x$x)- d$y*2000, y=d$x+mean(x$y))
#     res <- res[order(res$y), ]
#     ## Get some data for normal lines as well
#     xs <- seq(min(x$res), max(x$res), len=50)
#     res <- rbind(res, data.frame(y=xs + mean(x$y),
#                                  x=max(x$x) - 2000*dnorm(xs, 0, sd(x$res))))
#     res$type <- rep(c("empirical", "normal"), each=50)
#     res
# }))
# dens$section <- rep(levels(dat$section), each=100)
# ## Plot both empirical and theoretical
# ggplot(dat, aes(x, y)) +
#   geom_point() +
#   geom_smooth(method="lm", fill=NA, lwd=2) +
#   geom_path(data=dens, aes(x, y, group=interaction(section,type), color=type), lwd=1.1) +
#   theme_bw() +
#   geom_vline(xintercept=breaks, lty=2)
ggplot(dat, aes(x, y)) +
geom_point() +
geom_smooth(method="lm", fill=NA, lwd=1.25, se = FALSE) +
geom_path(data=dens, aes(x, y, group = grouping),
color="salmon", lwd=1.1) +
theme_bw() +
geom_vline(xintercept=breaks, lty=2)
## Sample data
set.seed(0)
dat <- data.frame(x=(x=runif(200, 0, 50)),
y=rnorm(200, 10 * x, 100))
## breaks: where you want to compute densities
breaks <- seq(0, max(dat$x), len=7)[-c(1, 7)]
dat$section <- cut(dat$x, breaks)
## Get the residuals
dat$res <- residuals(lm(y ~ x, data=dat))
## Compute densities for each section, and flip the axes, and add means of sections
## Note: the densities need to be scaled in relation to the section size (2000 here)
ys <- seq(-300, 300, length = 50)
xs <- rep(breaks, each = 50) + 1000 * dnorm(ys, 0, 100)
res <- matrix(0, 50, 5)
for (i in 1:5) {
res[, i] <- 10 * breaks[i] + ys
}
dens <- data.frame(x = xs, y=c(res),
grouping = cut(xs, breaks))
# dens <- do.call(rbind, lapply(split(dat, dat$section), function(x) {
#     d <- density(x$res, n=50)
#     res <- data.frame(x=max(x$x)- d$y*2000, y=d$x+mean(x$y))
#     res <- res[order(res$y), ]
#     ## Get some data for normal lines as well
#     xs <- seq(min(x$res), max(x$res), len=50)
#     res <- rbind(res, data.frame(y=xs + mean(x$y),
#                                  x=max(x$x) - 2000*dnorm(xs, 0, sd(x$res))))
#     res$type <- rep(c("empirical", "normal"), each=50)
#     res
# }))
# dens$section <- rep(levels(dat$section), each=100)
# ## Plot both empirical and theoretical
# ggplot(dat, aes(x, y)) +
#   geom_point() +
#   geom_smooth(method="lm", fill=NA, lwd=2) +
#   geom_path(data=dens, aes(x, y, group=interaction(section,type), color=type), lwd=1.1) +
#   theme_bw() +
#   geom_vline(xintercept=breaks, lty=2)
ggplot(dat, aes(x, y)) +
geom_point(size = 2) +
geom_smooth(method="lm", fill=NA, lwd=2, se = FALSE) +
geom_path(data=dens, aes(x, y, group = grouping),
color="salmon", lwd=2) +
theme_bw() +
geom_vline(xintercept=breaks, lty=2)
giphyr:::gif_Addin()
giphyr:::gif_Addin()
giphyr:::gif_Addin()
update.packages("giphyr")
giphyr:::gif_Addin()
include_graphics(here("images", "frequentists_vs_bayesians_2x.png"))
library(animation)
library(knitr)
library(gganimate)
library(ggplot2)
source("./functions/multiplot.R")
source(here("functions", "multiplot.R"))
library(here)
source(here("functions", "multiplot.R"))
source(here("functions", "multiplot.R"))
library(animation)
library(knitr)
library(gganimate)
library(ggplot2)
source(here("functions", "multiplot.R"))
set.seed(501)
theme_set(theme_bw())
K <- 20
iter <- 100
cluster <- rep(0, iter)
for (i in 1:iter) {
b <- rbeta(K, 1, 5)
p <- numeric(K)
p[1] <- b[1]
p[2:K] <- sapply(2:K, function(i) b[i] * prod(1 - b[1:(i-1)]))
cluster[i] <- sample(1:K, 1, prob=p)
}
cluster <- factor(cluster, levels=1:K)
dat <- data.frame(
count = c(unlist(sapply(1:iter, function(i) tabulate(cluster[1:i], nbins=K)))),
cluster=rep(1:K, times=iter*K),
iter=rep(factor(1:iter), each=K))
for (i in 1:iter) {
b <- rbeta(K, 1, 1)
p <- numeric(K)
p[1] <- b[1]
p[2:K] <- sapply(2:K, function(i) b[i] * prod(1 - b[1:(i-1)]))
cluster[i] <- sample(1:K, 1, prob=p)
}
cluster <- factor(cluster, levels=1:K)
dat2 <- data.frame(
count = c(unlist(sapply(1:iter, function(i) tabulate(cluster[1:i], nbins=K)))),
cluster=rep(1:K, times=iter*K),
iter=rep(factor(1:iter), each=K))
lims <- c(0, max(max(dat$count), dat2$count))
for (i in 1:100) {
p1 <- ggplot(subset(dat, iter == i), aes(x=cluster, y=count)) + geom_point() +
ggtitle(paste("Prior with many clusters\n Sediment grain =", i)) +
xlab("Number Rock Creation Events") +
ylab("Number sediment grains") +
ylim(lims) +
theme(plot.title = element_text(size=22, face="bold"),
axis.text=element_text(size=14),
axis.title=element_text(size=18, face="bold"))
p2 <- ggplot(subset(dat2, iter == i), aes(x=cluster, y=count)) + geom_point() +
ggtitle(paste("Prior with few clusters\n Sediment grain =", i)) +
xlab("Number Rock Creation Events") +
ylab("Number sediment grains") +
ylim(lims) +
theme(plot.title = element_text(size=22, face="bold"),
axis.text=element_text(size=14),
axis.title=element_text(size=18, face="bold"))
png(file=here::here("animations", paste0("clusters", i, ".png")),
width=16, height=9, units="in", res=200)
multiplot(p1, p2, cols=2)
dev.off()
}
lims <- c(0, max(max(dat$count), dat2$count))
for (i in 1:100) {
p1 <- ggplot(subset(dat, iter == i), aes(x=cluster, y=count)) + geom_point() +
ggtitle(paste("Prior with many clusters\n Sediment grain =", i)) +
xlab("Number Rock Creation Events") +
ylab("Number sediment grains") +
ylim(lims) +
theme(plot.title = element_text(size=22, face="bold"),
axis.text=element_text(size=14),
axis.title=element_text(size=18, face="bold"))
p2 <- ggplot(subset(dat2, iter == i), aes(x=cluster, y=count)) + geom_point() +
ggtitle(paste("Prior with few clusters\n Sediment grain =", i)) +
xlab("Number Rock Creation Events") +
ylab("Number sediment grains") +
ylim(lims) +
theme(plot.title = element_text(size=22, face="bold"),
axis.text=element_text(size=14),
axis.title=element_text(size=18, face="bold"))
png(file=here::here("animations", paste0("clusters", i, ".png")),
width=16, height=9, units="in", res=200)
multiplot(p1, p2, cols=2)
dev.off()
}
include_graphics(c(here("..", "..", "..", "mixing", "figures",
"age-mixing-model.png"),
here("..", "..", "..", "mixing", "figures",
"weighted-age-mixing-model.png"),
here("..", "..", "..", "mixing", "figures",
"weighted-age-mixing-model-shaded.png")))
